diff --git a/Makefile.in b/Makefile.in
index 1221190..bbf5229 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -10580,6 +10580,7 @@ COND_TOOLKIT_OSX_COCOA___GUI_SRC_OBJECTS_2 =  \
 	coredll_osx_cocoa_checkbox.o \
 	coredll_osx_cocoa_choice.o \
 	coredll_osx_cocoa_colour.o \
+	coredll_cedrus_carbon_colordlg.o \
 	coredll_osx_cocoa_combobox.o \
 	coredll_osx_cocoa_dialog.o \
 	coredll_osx_cocoa_dirdlg.o \
@@ -20092,14 +20093,14 @@ monodll_sound_sdl.o: $(srcdir)/src/unix/sound_sdl.cpp $(MONODLL_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@monodll_uiaction_osx.o: $(srcdir)/src/osx/uiaction_osx.cpp $(MONODLL_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/uiaction_osx.cpp
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@monodll_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(MONODLL_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@monodll_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(MONODLL_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@monodll_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(MONODLL_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@monodll_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(MONODLL_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@monodll_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(MONODLL_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@monodll_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(MONODLL_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@monodll_window_osx.o: $(srcdir)/src/osx/window_osx.cpp $(MONODLL_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/window_osx.cpp
@@ -25969,14 +25970,14 @@ monolib_sound_sdl.o: $(srcdir)/src/unix/sound_sdl.cpp $(MONOLIB_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@monolib_uiaction_osx.o: $(srcdir)/src/osx/uiaction_osx.cpp $(MONOLIB_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/uiaction_osx.cpp
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@monolib_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(MONOLIB_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@monolib_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(MONOLIB_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@monolib_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(MONOLIB_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@monolib_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(MONOLIB_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@monolib_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(MONOLIB_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@monolib_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(MONOLIB_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(MONODLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@monolib_window_osx.o: $(srcdir)/src/osx/window_osx.cpp $(MONOLIB_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/window_osx.cpp
@@ -30268,6 +30269,10 @@ coredll_osx_cocoa_choice.o: $(srcdir)/src/osx/cocoa/choice.mm $(COREDLL_ODEP)
 coredll_osx_cocoa_colour.o: $(srcdir)/src/osx/cocoa/colour.mm $(COREDLL_ODEP)
 	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/cocoa/colour.mm
 
+
+coredll_cedrus_carbon_colordlg.o: $(srcdir)/src/osx/carbon/colordlg.cpp $(COREDLL_ODEP)
+	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/osx/carbon/colordlg.cpp
+
 coredll_osx_cocoa_combobox.o: $(srcdir)/src/osx/cocoa/combobox.mm $(COREDLL_ODEP)
 	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/cocoa/combobox.mm
 
@@ -32008,14 +32013,14 @@ coredll_win32.o: $(srcdir)/src/univ/themes/win32.cpp $(COREDLL_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@coredll_uiaction_osx.o: $(srcdir)/src/osx/uiaction_osx.cpp $(COREDLL_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/osx/uiaction_osx.cpp
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@coredll_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(COREDLL_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@coredll_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(COREDLL_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@coredll_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(COREDLL_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@coredll_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(COREDLL_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@coredll_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(COREDLL_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@coredll_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(COREDLL_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@coredll_window_osx.o: $(srcdir)/src/osx/window_osx.cpp $(COREDLL_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $(srcdir)/src/osx/window_osx.cpp
@@ -36391,14 +36396,14 @@ corelib_win32.o: $(srcdir)/src/univ/themes/win32.cpp $(CORELIB_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@corelib_uiaction_osx.o: $(srcdir)/src/osx/uiaction_osx.cpp $(CORELIB_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/osx/uiaction_osx.cpp
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@corelib_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(CORELIB_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@corelib_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(CORELIB_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@corelib_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(CORELIB_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@corelib_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(CORELIB_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_COCOA_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@corelib_utils_osx.o: $(srcdir)/src/osx/utils_osx.cpp $(CORELIB_ODEP)
-@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/osx/utils_osx.cpp
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@corelib_utils_osx.o: $(srcdir)/src/osx/utils_osx.mm $(CORELIB_ODEP)
+@COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_IPHONE_USE_GUI_1@	$(CXXC) -c -o $@ $(COREDLL_OBJCXXFLAGS) $(srcdir)/src/osx/utils_osx.mm
 
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@corelib_window_osx.o: $(srcdir)/src/osx/window_osx.cpp $(CORELIB_ODEP)
 @COND_PLATFORM_MACOSX_1_TOOLKIT_OSX_CARBON_USE_GUI_1@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $(srcdir)/src/osx/window_osx.cpp
diff --git a/include/wx/fontdlg.h b/include/wx/fontdlg.h
index 74a6e6f..6cfe53b 100644
--- a/include/wx/fontdlg.h
+++ b/include/wx/fontdlg.h
@@ -74,6 +74,7 @@ inline bool wxFontDialogBase::Create(wxWindow *parent, const wxFontData *data)
 #if defined( __WXOSX_MAC__ )
 //set to 1 to use native mac font and color dialogs
 #define USE_NATIVE_FONT_DIALOG_FOR_MACOSX 1
+#define USE_NATIVE_FONT_DIALOG_FOR_MACOSX 0  // set to ZERO by Cedrus
 #else
 //not supported on these platforms, leave 0
 #define USE_NATIVE_FONT_DIALOG_FOR_MACOSX 0
diff --git a/include/wx/osx/fontdlg.h b/include/wx/osx/fontdlg.h
index e271578..6f8c043 100644
--- a/include/wx/osx/fontdlg.h
+++ b/include/wx/osx/fontdlg.h
@@ -28,6 +28,8 @@
 #define wxOSX_USE_EXPERIMENTAL_FONTDIALOG 1
 #endif
 
+#define wxOSX_USE_EXPERIMENTAL_FONTDIALOG 0 // added by Cedrus
+
 #if wxOSX_USE_EXPERIMENTAL_FONTDIALOG
 
 class WXDLLIMPEXP_CORE wxFontDialog : public wxDialog
diff --git a/src/generic/logg.cpp b/src/generic/logg.cpp
index 6204463..fb9c5c0 100644
--- a/src/generic/logg.cpp
+++ b/src/generic/logg.cpp
@@ -731,7 +731,8 @@ wxLogDialog::wxLogDialog(wxWindow *parent,
     }
 
     // create the text sizer with a minimal size so that we are sure it won't be too small
-    wxString message = EllipsizeString(messages.Last());
+    //    wxString message = EllipsizeString(messages.Last()); // commented out by Cedrus. we want EllipsizeString called from CreateDetailsControls, but not here.
+    wxString message = messages.Last();
     wxSizer *szText = CreateTextSizer(message);
     szText->SetMinSize(wxMin(300, wxGetDisplaySize().x / 3), -1);
 
diff --git a/src/osx/carbon/colordlg.cpp b/src/osx/carbon/colordlg.cpp
index 53f11e0..88dddb7 100644
--- a/src/osx/carbon/colordlg.cpp
+++ b/src/osx/carbon/colordlg.cpp
@@ -16,7 +16,7 @@
 #include "wx/modalhook.h"
 
 
-#if !USE_NATIVE_FONT_DIALOG_FOR_MACOSX && wxUSE_COLOURDLG
+//#if !USE_NATIVE_FONT_DIALOG_FOR_MACOSX && wxUSE_COLOURDLG  // commented out by Cedrus
 
 IMPLEMENT_DYNAMIC_CLASS(wxColourDialog, wxDialog)
 
@@ -76,4 +76,4 @@ int wxColourDialog::ShowModal()
     return wxID_CANCEL;
 }
 
-#endif
+//#endif // commented out by Cedrus
diff --git a/src/osx/cocoa/nonownedwnd.mm b/src/osx/cocoa/nonownedwnd.mm
index 9e79c6a..58b6af9 100644
--- a/src/osx/cocoa/nonownedwnd.mm
+++ b/src/osx/cocoa/nonownedwnd.mm
@@ -927,8 +927,15 @@ bool wxNonOwnedWindowCocoaImpl::IsFullScreen() const
     return m_macFullScreenData != NULL ;
 }
 
-bool wxNonOwnedWindowCocoaImpl::ShowFullScreen(bool show, long WXUNUSED(style))
+bool wxNonOwnedWindowCocoaImpl::ShowFullScreen(bool show, const long style)
 {
+    static const long BIZARRE_CEDRUS_FLAG = 2109876543;
+    wxASSERT_MSG( style == BIZARRE_CEDRUS_FLAG, wxT("\n\n Warning: this function contains Cedrus-custom code. Kelly added the custom code \
+*purely* in the context of fixing the SuperLab experiment runtime window (SLPresenterBase::SLSdkWindow).  The Cedrus modifications \
+may or may not be a good idea for scenarios OTHER THAN the experiment window. This assert was put here so that we would immediately \
+know to do extra testing on whichever future occasion was the first time we call this function from any NEW callsite. (the assumption is \
+that someone who 'innocently' call this function in some new spot will not know to pass 2109876543 to bypass this warning.) \n\n") );
+
     if ( show )
     {
         FullScreenData *data = (FullScreenData *)m_macFullScreenData ;
@@ -958,12 +965,27 @@ bool wxNonOwnedWindowCocoaImpl::ShowFullScreen(bool show, long WXUNUSED(style))
         screenframe.size.height += (frame.size.height - contentRect.size.height);
         [m_macWindow setFrame:screenframe display:YES];
 
-        SetSystemUIMode(kUIModeAllHidden,
-                                kUIOptionDisableAppleMenu
-                        /*
-                                | kUIOptionDisableProcessSwitch
-                                | kUIOptionDisableForceQuit
-                         */); 
+        if ( style != BIZARRE_CEDRUS_FLAG )
+        {
+            // this is the NORMAL 'official' wxWidgets code:
+            SetSystemUIMode(kUIModeAllHidden,
+                            kUIOptionDisableAppleMenu
+                            /*
+                              | kUIOptionDisableProcessSwitch
+                              | kUIOptionDisableForceQuit
+                            */);
+        }
+        else
+        {
+            // custom code by kelly. when this was added we were still
+            // supporting mac 10.5. we were using wxWidgets 2.9.3 cocoa.
+            // (and the date of the changes: Aug 3, 2012)
+            [m_macWindow setLevel:kCGNormalWindowLevel];
+            [NSMenu setMenuBarVisible:NO];
+            [m_macWindow makeKeyAndOrderFront:nil];
+
+            SetSystemUIMode(kUIModeAllHidden, 0);
+        }
     }
     else if ( m_macFullScreenData != NULL )
     {
@@ -981,7 +1003,16 @@ bool wxNonOwnedWindowCocoaImpl::ShowFullScreen(bool show, long WXUNUSED(style))
         delete data ;
         m_macFullScreenData = NULL ;
 
-        SetSystemUIMode(kUIModeNormal, 0); 
+        if ( style == BIZARRE_CEDRUS_FLAG )
+        {
+            // custom code by kelly. when this was added we were still
+            // supporting mac 10.5. we were using wxWidgets 2.9.3 cocoa.
+            // (and the date of the changes: Aug 3, 2012)
+
+            [NSMenu setMenuBarVisible:YES];
+        }
+
+        SetSystemUIMode(kUIModeNormal, 0);
     }
 
     return true;
diff --git a/src/osx/textctrl_osx.cpp b/src/osx/textctrl_osx.cpp
index 08346e5..5692727 100644
--- a/src/osx/textctrl_osx.cpp
+++ b/src/osx/textctrl_osx.cpp
@@ -165,6 +165,10 @@ bool wxTextCtrl::SetFont( const wxFont& font )
 
 bool wxTextCtrl::SetStyle(long start, long end, const wxTextAttr& style)
 {
+    const long contentLength = GetValue().Length(); // for cedrus assertion. see http://trac.wxwidgets.org/ticket/14481
+    wxASSERT_MSG( (start <= contentLength) && (end <= contentLength), wxT("Range is not valid for the current content of the wxTextCtrl") );
+    wxUnusedVar( contentLength );
+
     if (GetTextPeer())
         GetTextPeer()->SetStyle( start , end , style ) ;
 
diff --git a/src/osx/utils_osx.cpp b/src/osx/utils_osx.cpp
deleted file mode 100644
index bfcf65f..0000000
--- a/src/osx/utils_osx.cpp
+++ /dev/null
@@ -1,290 +0,0 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        src/osx/utils_osx.cpp
-// Purpose:     Various utilities
-// Author:      Stefan Csomor
-// Modified by:
-// Created:     1998-01-01
-// Copyright:   (c) Stefan Csomor
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-
-#include "wx/wxprec.h"
-
-#include "wx/utils.h"
-
-#ifndef WX_PRECOMP
-    #include "wx/intl.h"
-    #include "wx/app.h"
-    #include "wx/log.h"
-    #if wxUSE_GUI
-        #include "wx/toplevel.h"
-        #include "wx/font.h"
-    #endif
-#endif
-
-#include "wx/apptrait.h"
-
-#include <ctype.h>
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <stdarg.h>
-
-// #include "MoreFilesX.h"
-
-#include <AudioToolbox/AudioServices.h>
-
-#include "wx/osx/private.h"
-#include "wx/osx/private/timer.h"
-
-#include "wx/evtloop.h"
-
-// Check whether this window wants to process messages, e.g. Stop button
-// in long calculations.
-bool wxCheckForInterrupt(wxWindow *WXUNUSED(wnd))
-{
-    // TODO
-    return false;
-}
-
-// Return true if we have a colour display
-bool wxColourDisplay()
-{
-    // always the case on OS X
-    return true;
-}
-
-
-#if wxOSX_USE_COCOA_OR_CARBON
-
-#if (MAC_OS_X_VERSION_MAX_ALLOWED >= 1070) && (MAC_OS_X_VERSION_MIN_REQUIRED < 1060)
-// bring back declaration so that we can support deployment targets < 10_6
-CG_EXTERN size_t CGDisplayBitsPerPixel(CGDirectDisplayID display)
-CG_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6,
-                            __IPHONE_NA, __IPHONE_NA);
-#endif
-
-// Returns depth of screen
-int wxDisplayDepth()
-{
-    int theDepth = 0;
-    
-#if MAC_OS_X_VERSION_MAX_ALLOWED >= 1060
-    if ( UMAGetSystemVersion() >= 0x1060 ) 
-    {
-        CGDisplayModeRef currentMode = CGDisplayCopyDisplayMode(kCGDirectMainDisplay);
-        CFStringRef encoding = CGDisplayModeCopyPixelEncoding(currentMode);
-        
-        if(CFStringCompare(encoding, CFSTR(IO32BitDirectPixels), kCFCompareCaseInsensitive) == kCFCompareEqualTo)
-            theDepth = 32;
-        else if(CFStringCompare(encoding, CFSTR(IO16BitDirectPixels), kCFCompareCaseInsensitive) == kCFCompareEqualTo)
-            theDepth = 16;
-        else if(CFStringCompare(encoding, CFSTR(IO8BitIndexedPixels), kCFCompareCaseInsensitive) == kCFCompareEqualTo)
-            theDepth = 8;
-        else
-            theDepth = 32; // some reasonable default
-
-        CFRelease(encoding);
-        CGDisplayModeRelease(currentMode);
-    }
-    else
-#endif
-    {
-#if MAC_OS_X_VERSION_MIN_REQUIRED < 1060
-        theDepth = (int) CGDisplayBitsPerPixel(CGMainDisplayID());
-#endif
-    }
-    return theDepth;
-}
-
-// Get size of display
-void wxDisplaySize(int *width, int *height)
-{
-    // TODO adapt for multi-displays
-    CGRect bounds = CGDisplayBounds(CGMainDisplayID());
-    if ( width )
-        *width = (int)bounds.size.width ;
-    if ( height )
-        *height = (int)bounds.size.height;
-}
-
-#if wxUSE_GUI
-
-// ----------------------------------------------------------------------------
-// Launch document with default app
-// ----------------------------------------------------------------------------
-
-bool wxLaunchDefaultApplication(const wxString& document, int flags)
-{
-    wxUnusedVar(flags);
-
-    wxCFRef<CFMutableStringRef> cfMutableString(CFStringCreateMutableCopy(NULL, 0, wxCFStringRef(document)));
-    CFStringNormalize(cfMutableString,kCFStringNormalizationFormD);
-    wxCFRef<CFURLRef> curl(CFURLCreateWithFileSystemPath(kCFAllocatorDefault, cfMutableString , kCFURLPOSIXPathStyle, false));
-    OSStatus err = LSOpenCFURLRef( curl , NULL );
-
-    if (err == noErr)
-    {
-        return true;
-    }
-    else
-    {
-        wxLogDebug(wxT("Default Application Launch error %d"), (int) err);
-        return false;
-    }
-}
-
-// ----------------------------------------------------------------------------
-// Launch default browser
-// ----------------------------------------------------------------------------
-
-bool wxDoLaunchDefaultBrowser(const wxString& url, int flags)
-{
-    wxUnusedVar(flags);
-    wxCFRef< CFURLRef > curl( CFURLCreateWithString( kCFAllocatorDefault,
-                              wxCFStringRef( url ), NULL ) );
-    OSStatus err = LSOpenCFURLRef( curl , NULL );
-
-    if (err == noErr)
-    {
-        return true;
-    }
-    else
-    {
-        wxLogDebug(wxT("Browser Launch error %d"), (int) err);
-        return false;
-    }
-}
-
-#endif // wxUSE_GUI
-
-#endif
-
-void wxDisplaySizeMM(int *width, int *height)
-{
-    wxDisplaySize(width, height);
-    // on mac 72 is fixed (at least now;-)
-    double cvPt2Mm = 25.4 / 72;
-
-    if (width != NULL)
-        *width = int( *width * cvPt2Mm );
-
-    if (height != NULL)
-        *height = int( *height * cvPt2Mm );
-}
-
-
-wxPortId wxGUIAppTraits::GetToolkitVersion(int *verMaj, int *verMin) const
-{
-    // We suppose that toolkit version is the same as OS version under Mac
-    wxGetOsVersion(verMaj, verMin);
-
-    return wxPORT_OSX;
-}
-
-wxEventLoopBase* wxGUIAppTraits::CreateEventLoop()
-{
-    return new wxEventLoop;
-}
-
-wxWindow* wxFindWindowAtPoint(wxWindow* win, const wxPoint& pt);
-
-wxWindow* wxFindWindowAtPoint(const wxPoint& pt)
-{
-#if wxOSX_USE_CARBON
-
-    Point screenPoint = { pt.y , pt.x };
-    WindowRef windowRef;
-
-    if ( FindWindow( screenPoint , &windowRef ) )
-    {
-        wxNonOwnedWindow *nonOwned = wxNonOwnedWindow::GetFromWXWindow( windowRef );
-
-        if ( nonOwned )
-            return wxFindWindowAtPoint( nonOwned , pt );
-    }
-
-    return NULL;
-
-#else
-
-    return wxGenericFindWindowAtPoint( pt );
-
-#endif
-}
-
-/*
-    Return the generic RGB color space. This is a 'get' function and the caller should
-    not release the returned value unless the caller retains it first. Usually callers
-    of this routine will immediately use the returned colorspace with CoreGraphics
-    so they typically do not need to retain it themselves.
-
-    This function creates the generic RGB color space once and hangs onto it so it can
-    return it whenever this function is called.
-*/
-
-CGColorSpaceRef wxMacGetGenericRGBColorSpace()
-{
-    static wxCFRef<CGColorSpaceRef> genericRGBColorSpace;
-
-    if (genericRGBColorSpace == NULL)
-    {
-#if wxOSX_USE_IPHONE
-        genericRGBColorSpace.reset( CGColorSpaceCreateDeviceRGB() );
-#else
-        genericRGBColorSpace.reset( CGColorSpaceCreateWithName( kCGColorSpaceGenericRGB ) );
-#endif
-    }
-
-    return genericRGBColorSpace;
-}
-
-#if wxOSX_USE_COCOA_OR_CARBON
-
-CGColorRef wxMacCreateCGColorFromHITheme( ThemeBrush brush )
-{
-    const int maxcachedbrush = 58+5; // negative indices are for metabrushes, cache down to -5)
-    int brushindex = brush+5;
-    if ( brushindex < 0 || brushindex > maxcachedbrush )
-    {
-        CGColorRef color ;
-        HIThemeBrushCreateCGColor( brush, &color );
-        return color;
-    }
-    else
-    {
-        static bool inited = false;
-        static CGColorRef themecolors[maxcachedbrush+1];
-        if ( !inited )
-        {
-            for ( int i = 0 ; i <= maxcachedbrush ; ++i )
-                HIThemeBrushCreateCGColor( i-5, &themecolors[i] );
-            inited = true;
-        }
-        return CGColorRetain(themecolors[brushindex ]);
-    }
-}
-
-//---------------------------------------------------------------------------
-// Mac Specific string utility functions
-//---------------------------------------------------------------------------
-
-void wxMacStringToPascal( const wxString&from , unsigned char * to )
-{
-    wxCharBuffer buf = from.mb_str( wxConvLocal );
-    int len = strlen(buf);
-
-    if ( len > 255 )
-        len = 255;
-    to[0] = len;
-    memcpy( (char*) &to[1] , buf , len );
-}
-
-wxString wxMacMakeStringFromPascal( const unsigned char * from )
-{
-    return wxString( (char*) &from[1] , wxConvLocal , from[0] );
-}
-
-#endif // wxOSX_USE_COCOA_OR_CARBON
diff --git a/src/osx/utils_osx.mm b/src/osx/utils_osx.mm
new file mode 100644
index 0000000..aa7561a
--- /dev/null
+++ b/src/osx/utils_osx.mm
@@ -0,0 +1,305 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/osx/utils_osx.cpp
+// Purpose:     Various utilities
+// Author:      Stefan Csomor
+// Modified by:
+// Created:     1998-01-01
+// Copyright:   (c) Stefan Csomor
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+
+#include "wx/wxprec.h"
+
+#include "wx/utils.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/intl.h"
+    #include "wx/app.h"
+    #include "wx/log.h"
+    #if wxUSE_GUI
+        #include "wx/toplevel.h"
+        #include "wx/font.h"
+    #endif
+#endif
+
+#include "wx/apptrait.h"
+
+#include <ctype.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdarg.h>
+
+// #include "MoreFilesX.h"
+
+#include <AudioToolbox/AudioServices.h>
+
+#include "wx/osx/private.h"
+#include "wx/osx/private/timer.h"
+#include "wx/osx/core/cfstring.h"
+#import <Foundation/NSURL.h>
+
+#include "wx/evtloop.h"
+
+// Check whether this window wants to process messages, e.g. Stop button
+// in long calculations.
+bool wxCheckForInterrupt(wxWindow *WXUNUSED(wnd))
+{
+    // TODO
+    return false;
+}
+
+// Return true if we have a colour display
+bool wxColourDisplay()
+{
+    // always the case on OS X
+    return true;
+}
+
+
+#if wxOSX_USE_COCOA_OR_CARBON
+
+#if (MAC_OS_X_VERSION_MAX_ALLOWED >= 1070) && (MAC_OS_X_VERSION_MIN_REQUIRED < 1060)
+// bring back declaration so that we can support deployment targets < 10_6
+CG_EXTERN size_t CGDisplayBitsPerPixel(CGDirectDisplayID display)
+CG_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6,
+                            __IPHONE_NA, __IPHONE_NA);
+#endif
+
+// Returns depth of screen
+int wxDisplayDepth()
+{
+    int theDepth = 0;
+    
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 1060
+    if ( UMAGetSystemVersion() >= 0x1060 ) 
+    {
+        CGDisplayModeRef currentMode = CGDisplayCopyDisplayMode(kCGDirectMainDisplay);
+        CFStringRef encoding = CGDisplayModeCopyPixelEncoding(currentMode);
+        
+        if(CFStringCompare(encoding, CFSTR(IO32BitDirectPixels), kCFCompareCaseInsensitive) == kCFCompareEqualTo)
+            theDepth = 32;
+        else if(CFStringCompare(encoding, CFSTR(IO16BitDirectPixels), kCFCompareCaseInsensitive) == kCFCompareEqualTo)
+            theDepth = 16;
+        else if(CFStringCompare(encoding, CFSTR(IO8BitIndexedPixels), kCFCompareCaseInsensitive) == kCFCompareEqualTo)
+            theDepth = 8;
+        else
+            theDepth = 32; // some reasonable default
+
+        CFRelease(encoding);
+        CGDisplayModeRelease(currentMode);
+    }
+    else
+#endif
+    {
+#if MAC_OS_X_VERSION_MIN_REQUIRED < 1060
+        theDepth = (int) CGDisplayBitsPerPixel(CGMainDisplayID());
+#endif
+    }
+    return theDepth;
+}
+
+// Get size of display
+void wxDisplaySize(int *width, int *height)
+{
+    // TODO adapt for multi-displays
+    CGRect bounds = CGDisplayBounds(CGMainDisplayID());
+    if ( width )
+        *width = (int)bounds.size.width ;
+    if ( height )
+        *height = (int)bounds.size.height;
+}
+
+#if wxUSE_GUI
+
+// ----------------------------------------------------------------------------
+// Launch document with default app
+// ----------------------------------------------------------------------------
+
+bool wxLaunchDefaultApplication(const wxString& document, int flags)
+{
+    wxUnusedVar(flags);
+
+    wxCFRef<CFMutableStringRef> cfMutableString(CFStringCreateMutableCopy(NULL, 0, wxCFStringRef(document)));
+    CFStringNormalize(cfMutableString,kCFStringNormalizationFormD);
+    wxCFRef<CFURLRef> curl(CFURLCreateWithFileSystemPath(kCFAllocatorDefault, cfMutableString , kCFURLPOSIXPathStyle, false));
+    OSStatus err = LSOpenCFURLRef( curl , NULL );
+
+    if (err == noErr)
+    {
+        return true;
+    }
+    else
+    {
+        wxLogDebug(wxT("Default Application Launch error %d"), (int) err);
+        return false;
+    }
+}
+
+// ----------------------------------------------------------------------------
+// Launch default browser
+// ----------------------------------------------------------------------------
+
+bool wxDoLaunchDefaultBrowser(const wxString& url, int flags)
+{
+    wxUnusedVar(flags);
+
+    NSString *temp = [NSString stringWithUTF8String:url.mb_str(wxConvUTF8)];
+
+    NSURL *nsurl =
+        [[NSURL alloc] initWithString:
+         [temp stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding] ];
+
+    OSStatus err = noErr;
+
+    if ( nsurl )
+    {
+        err = LSOpenCFURLRef( (CFURLRef)nsurl , NULL );
+    }
+
+    //[nsurl release]; // without these, there may be a TINY leak, but otherwise i was getting some auto-release crash issue
+    //[temp release];
+
+    if (err == noErr)
+    {
+        return true;
+    }
+    else
+    {
+        wxLogDebug(wxT("Browser Launch error %d"), (int) err);
+        return false;
+    }
+}
+
+#endif // wxUSE_GUI
+
+#endif
+
+void wxDisplaySizeMM(int *width, int *height)
+{
+    wxDisplaySize(width, height);
+    // on mac 72 is fixed (at least now;-)
+    double cvPt2Mm = 25.4 / 72;
+
+    if (width != NULL)
+        *width = int( *width * cvPt2Mm );
+
+    if (height != NULL)
+        *height = int( *height * cvPt2Mm );
+}
+
+
+wxPortId wxGUIAppTraits::GetToolkitVersion(int *verMaj, int *verMin) const
+{
+    // We suppose that toolkit version is the same as OS version under Mac
+    wxGetOsVersion(verMaj, verMin);
+
+    return wxPORT_OSX;
+}
+
+wxEventLoopBase* wxGUIAppTraits::CreateEventLoop()
+{
+    return new wxEventLoop;
+}
+
+wxWindow* wxFindWindowAtPoint(wxWindow* win, const wxPoint& pt);
+
+wxWindow* wxFindWindowAtPoint(const wxPoint& pt)
+{
+#if wxOSX_USE_CARBON
+
+    Point screenPoint = { pt.y , pt.x };
+    WindowRef windowRef;
+
+    if ( FindWindow( screenPoint , &windowRef ) )
+    {
+        wxNonOwnedWindow *nonOwned = wxNonOwnedWindow::GetFromWXWindow( windowRef );
+
+        if ( nonOwned )
+            return wxFindWindowAtPoint( nonOwned , pt );
+    }
+
+    return NULL;
+
+#else
+
+    return wxGenericFindWindowAtPoint( pt );
+
+#endif
+}
+
+/*
+    Return the generic RGB color space. This is a 'get' function and the caller should
+    not release the returned value unless the caller retains it first. Usually callers
+    of this routine will immediately use the returned colorspace with CoreGraphics
+    so they typically do not need to retain it themselves.
+
+    This function creates the generic RGB color space once and hangs onto it so it can
+    return it whenever this function is called.
+*/
+
+CGColorSpaceRef wxMacGetGenericRGBColorSpace()
+{
+    static wxCFRef<CGColorSpaceRef> genericRGBColorSpace;
+
+    if (genericRGBColorSpace == NULL)
+    {
+#if wxOSX_USE_IPHONE
+        genericRGBColorSpace.reset( CGColorSpaceCreateDeviceRGB() );
+#else
+        genericRGBColorSpace.reset( CGColorSpaceCreateWithName( kCGColorSpaceGenericRGB ) );
+#endif
+    }
+
+    return genericRGBColorSpace;
+}
+
+#if wxOSX_USE_COCOA_OR_CARBON
+
+CGColorRef wxMacCreateCGColorFromHITheme( ThemeBrush brush )
+{
+    const int maxcachedbrush = 58+5; // negative indices are for metabrushes, cache down to -5)
+    int brushindex = brush+5;
+    if ( brushindex < 0 || brushindex > maxcachedbrush )
+    {
+        CGColorRef color ;
+        HIThemeBrushCreateCGColor( brush, &color );
+        return color;
+    }
+    else
+    {
+        static bool inited = false;
+        static CGColorRef themecolors[maxcachedbrush+1];
+        if ( !inited )
+        {
+            for ( int i = 0 ; i <= maxcachedbrush ; ++i )
+                HIThemeBrushCreateCGColor( i-5, &themecolors[i] );
+            inited = true;
+        }
+        return CGColorRetain(themecolors[brushindex ]);
+    }
+}
+
+//---------------------------------------------------------------------------
+// Mac Specific string utility functions
+//---------------------------------------------------------------------------
+
+void wxMacStringToPascal( const wxString&from , unsigned char * to )
+{
+    wxCharBuffer buf = from.mb_str( wxConvLocal );
+    int len = strlen(buf);
+
+    if ( len > 255 )
+        len = 255;
+    to[0] = len;
+    memcpy( (char*) &to[1] , buf , len );
+}
+
+wxString wxMacMakeStringFromPascal( const unsigned char * from )
+{
+    return wxString( (char*) &from[1] , wxConvLocal , from[0] );
+}
+
+#endif // wxOSX_USE_COCOA_OR_CARBON
diff --git a/src/osx/cocoa/utils.mm b/src/osx/cocoa/utils.mm
index 02843c8..45e8f89 100644
--- a/src/osx/cocoa/utils.mm
+++ b/src/osx/cocoa/utils.mm
@@ -224,6 +224,12 @@ void wxBell()
         wxTheApp->SetActive( false , NULL ) ;
 }
 
+// for national instruments NI-DAQmx_Base_14.0.0 see: http://stackoverflow.com/questions/26674256/nidaqmx-yosemite-compatibility/32624881
+- (id)setHandler:(id)a withData:(id) b
+{
+        return nil;
+}
+
 @end
 
 /*
